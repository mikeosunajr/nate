{
  "version": 3,
  "sources": ["../binaryen.js", "../src/core.ts", "../localstorage.js", "../src/index.ts"],
  "sourcesContent": ["import binaryen from 'https://cdn.jsdelivr.net/npm/binaryen@105.0.0/index.min.js'\n\nexport default binaryen", "export enum Kind {\n  add,\n  number,\n}\n\nexport enum PrimitiveType {\n  number,\n}\n\nexport type Code = {\n  input: Type;\n  output: Type;\n};\n\nexport type Type = PrimitiveType | Set<Type> | Array<Type>;\n\ninterface BaseWord {\n  inputs: Array<Type>;\n  outputs: Array<Type>;\n}\n\nclass AddWord implements BaseWord {\n  kind: Kind.add = Kind.add;\n  inputs = [PrimitiveType.number, PrimitiveType.number];\n\n  outputs = [PrimitiveType.number];\n}\n\nclass NumberWord implements BaseWord {\n  kind: Kind.number = Kind.number;\n  number: number;\n  inputs = [];\n\n  outputs = [PrimitiveType.number];\n  constructor(n: number) {\n    this.number = n;\n  }\n}\n\nexport type Word = AddWord | NumberWord;\n\nexport function Add(): AddWord {\n  return new AddWord();\n}\n\nexport function Number(n: number): NumberWord {\n  return new NumberWord(n);\n}\n", "export function LocalStorage() {\n    return localStorage\n}", "import binaryen from \"binaryen\";\nimport * as Core from \"./core\";\nimport { LocalStorage } from \"node-localstorage\";\n\nconst localStorage = new LocalStorage(\"./scratch\");\n\nlet memory = new WebAssembly.Memory({\n  initial: 10,\n  maximum: 100,\n  shared: true,\n});\n\nclass Vocabulary {\n  name: Map<number, string> = new Map();\n  types: Map<string, Map<number, Core.Type>> = new Map();\n  words: Map<string, Map<number, Core.Word>> = new Map();\n}\n\nfunction compile(words: Core.Word[]) {\n  var mod = new binaryen.Module();\n\n  const stack: Array<number> = [];\n\n  let varId = 0;\n  const use = () => {\n    if (stack.length < 1) {\n      throw new Error(\"popping empty stack\");\n    }\n    return stack.pop() || 0;\n  };\n  const genvar = () => {\n    stack.push(varId);\n    varId += 1;\n    return varId - 1;\n  };\n\n  const shape = words.reduce<{\n    inputs: Array<Core.Type>;\n    outputs: Array<Core.Type>;\n    locals: Array<Core.Type>;\n  }>(\n    (p, w) => {\n      w.inputs.forEach((i) => {\n        if (p.outputs.length > 0) {\n          p.outputs.pop();\n        } else {\n          p.inputs.push(i);\n        }\n      });\n\n      w.outputs.forEach((o) => {\n        p.outputs.push(o);\n        p.locals.push(o);\n      });\n      return p;\n    },\n    { inputs: [], outputs: [], locals: [] }\n  );\n\n  console.log(shape);\n\n  shape.inputs.forEach((p) => {\n    genvar();\n  });\n\n  const expressions = words.map((word) => {\n    switch (word.kind) {\n      case Core.Kind.add:\n        // return add of last 2 values of stack\n        const a = mod.local.get(use(), binaryen.i32);\n        const b = mod.local.get(use(), binaryen.i32);\n\n        return mod.local.set(genvar(), mod.i32.add(a, b));\n      case Core.Kind.number:\n        // Push const value to stack\n        return mod.local.set(genvar(), mod.i32.const(word.number));\n    }\n  });\n\n  const varsToBinaryenTypes = (t: Array<Core.Type>) =>\n    t.map((v) => binaryen.i32);\n\n  mod.addFunction(\n    \"run\",\n    binaryen.createType(varsToBinaryenTypes(shape.inputs)),\n    binaryen.i32,\n    varsToBinaryenTypes(shape.locals),\n    mod.block(null, [\n      ...expressions,\n      mod.return(mod.local.get(use(), binaryen.i32)),\n    ])\n  );\n\n  mod.addFunctionExport(\"run\", \"run\");\n  mod.addMemoryImport(\"0\", \"env\", \"memory\");\n  mod.setMemory(1, 256, \"memoryExport\", [], true);\n  mod.setFeatures(binaryen.Features.Atomics);\n\n  // Optimize the module using default passes and levels\n  mod.optimize();\n\n  // // // Validate the module\n  if (!mod.validate()) throw new Error(\"validation error\");\n\n  // // Generate text format and binary\n  var textData = mod.emitText();\n  console.log(textData);\n  var wasmData = mod.emitBinary();\n\n  // Example usage with the WebAssembly API\n  return new WebAssembly.Module(wasmData);\n}\n\nconst wasm = compile([\n  Core.Number(3),\n  Core.Number(3),\n  Core.Add(),\n  Core.Add(),\n  Core.Number(3),\n  Core.Add(),\n]);\n\nvar instance = new WebAssembly.Instance(wasm, { env: { memory } });\nconsole.log((instance.exports.run as CallableFunction)(1));\n\n//addOne(42); // => 43\n"],
  "mappings": ";AAAA;AAEA,IAAO,mBAAQ;;;ACmBf,oBAAkC;AAAA,EAAlC,cArBA;AAsBE,gBAAiB;AACjB,kBAAS,CAAC,gBAAsB;AAEhC,mBAAU,CAAC;AAAA;AAAA;AAGb,uBAAqC;AAAA,EAMnC,YAAY,GAAW;AALvB,gBAAoB;AAEpB,kBAAS;AAET,mBAAU,CAAC;AAET,SAAK,SAAS;AAAA;AAAA;AAMX,eAAwB;AAC7B,SAAO,IAAI;AAAA;AAGN,gBAAgB,GAAuB;AAC5C,SAAO,IAAI,WAAW;AAAA;;;AC9CjB,wBAAwB;AAC3B,SAAO;AAAA;;;ACGX,IAAM,gBAAe,IAAI,aAAa;AAEtC,IAAI,SAAS,IAAI,YAAY,OAAO;AAAA,EAClC,SAAS;AAAA,EACT,SAAS;AAAA,EACT,QAAQ;AAAA;AASV,iBAAiB,OAAoB;AACnC,MAAI,MAAM,IAAI,iBAAS;AAEvB,QAAM,QAAuB;AAE7B,MAAI,QAAQ;AACZ,QAAM,MAAM,MAAM;AAChB,QAAI,MAAM,SAAS,GAAG;AACpB,YAAM,IAAI,MAAM;AAAA;AAElB,WAAO,MAAM,SAAS;AAAA;AAExB,QAAM,SAAS,MAAM;AACnB,UAAM,KAAK;AACX,aAAS;AACT,WAAO,QAAQ;AAAA;AAGjB,QAAM,QAAQ,MAAM,OAKlB,CAAC,GAAG,MAAM;AACR,MAAE,OAAO,QAAQ,CAAC,MAAM;AACtB,UAAI,EAAE,QAAQ,SAAS,GAAG;AACxB,UAAE,QAAQ;AAAA,aACL;AACL,UAAE,OAAO,KAAK;AAAA;AAAA;AAIlB,MAAE,QAAQ,QAAQ,CAAC,MAAM;AACvB,QAAE,QAAQ,KAAK;AACf,QAAE,OAAO,KAAK;AAAA;AAEhB,WAAO;AAAA,KAET,EAAE,QAAQ,IAAI,SAAS,IAAI,QAAQ;AAGrC,UAAQ,IAAI;AAEZ,QAAM,OAAO,QAAQ,CAAC,MAAM;AAC1B;AAAA;AAGF,QAAM,cAAc,MAAM,IAAI,CAAC,SAAS;AACtC,YAAQ,KAAK;AAAA,WACN;AAEH,cAAM,IAAI,IAAI,MAAM,IAAI,OAAO,iBAAS;AACxC,cAAM,IAAI,IAAI,MAAM,IAAI,OAAO,iBAAS;AAExC,eAAO,IAAI,MAAM,IAAI,UAAU,IAAI,IAAI,IAAI,GAAG;AAAA,WAC3C;AAEH,eAAO,IAAI,MAAM,IAAI,UAAU,IAAI,IAAI,MAAM,KAAK;AAAA;AAAA;AAIxD,QAAM,sBAAsB,CAAC,MAC3B,EAAE,IAAI,CAAC,MAAM,iBAAS;AAExB,MAAI,YACF,OACA,iBAAS,WAAW,oBAAoB,MAAM,UAC9C,iBAAS,KACT,oBAAoB,MAAM,SAC1B,IAAI,MAAM,MAAM;AAAA,IACd,GAAG;AAAA,IACH,IAAI,OAAO,IAAI,MAAM,IAAI,OAAO,iBAAS;AAAA;AAI7C,MAAI,kBAAkB,OAAO;AAC7B,MAAI,gBAAgB,KAAK,OAAO;AAChC,MAAI,UAAU,GAAG,KAAK,gBAAgB,IAAI;AAC1C,MAAI,YAAY,iBAAS,SAAS;AAGlC,MAAI;AAGJ,MAAI,CAAC,IAAI;AAAY,UAAM,IAAI,MAAM;AAGrC,MAAI,WAAW,IAAI;AACnB,UAAQ,IAAI;AACZ,MAAI,WAAW,IAAI;AAGnB,SAAO,IAAI,YAAY,OAAO;AAAA;AAGhC,IAAM,OAAO,QAAQ;AAAA,EACnB,AAAK,OAAO;AAAA,EACZ,AAAK,OAAO;AAAA,EACZ,AAAK;AAAA,EACL,AAAK;AAAA,EACL,AAAK,OAAO;AAAA,EACZ,AAAK;AAAA;AAGP,IAAI,WAAW,IAAI,YAAY,SAAS,MAAM,EAAE,KAAK,EAAE;AACvD,QAAQ,IAAK,SAAS,QAAQ,IAAyB;",
  "names": []
}
