{
  "version": 3,
  "sources": ["../binaryen.js", "../src/core.ts", "../src/index.ts"],
  "sourcesContent": ["import binaryen from 'https://cdn.jsdelivr.net/npm/binaryen@105.0.0/index.min.js'\n\nexport default binaryen", "export enum Kind {\n  add,\n  number,\n}\n\nexport enum TypeKinds {\n  number,\n}\n\nexport class TNumber {\n  kind: TypeKinds.number = TypeKinds.number;\n}\n\nexport type Type = TNumber;\n\nclass AddWord {\n  kind: Kind.add = Kind.add;\n}\n\nclass NumberWord {\n  kind: Kind.number = Kind.number;\n  number: number;\n  constructor(n: number) {\n    this.number = n;\n  }\n}\n\nexport type Word = AddWord | NumberWord;\n\nexport function Add(): AddWord {\n  return new AddWord();\n}\n\nexport function Number(n: number): NumberWord {\n  return new NumberWord(n);\n}\n\nexport function NumberT(): TNumber {\n  return new TNumber();\n}\n", "import binaryen from \"binaryen\";\nimport * as Core from \"./core\";\n\nlet memory = new WebAssembly.Memory({\n  initial: 10,\n  maximum: 100,\n  shared: true,\n});\n\nfunction compile(params: Core.Type[], words: Core.Word[]) {\n  var mod = new binaryen.Module();\n\n  let topOfStack = params.length - 1;\n  const incr = () => {\n    topOfStack += 1;\n    return;\n  };\n\n  const top = () => topOfStack;\n\n  const expressions = words.map((word) => {\n    switch (word.kind) {\n      case Core.Kind.add:\n        // return add of last 2 values of stack\n        const a = mod.local.get(top(), binaryen.i32);\n        const b = mod.local.get(top() - 1, binaryen.i32);\n\n        incr();\n        return mod.local.set(top(), mod.i32.add(a, b));\n      case Core.Kind.number:\n        // Push const value to stack\n        incr();\n\n        return mod.local.set(top(), mod.i32.const(word.number));\n    }\n  });\n\n  console.log(\"return\", top());\n\n  mod.addFunction(\n    \"run\",\n    binaryen.createType([binaryen.i32]),\n    binaryen.i32,\n    [binaryen.i32, binaryen.i32],\n    mod.block(null, [\n      ...expressions,\n      mod.return(mod.local.get(top(), binaryen.i32)),\n    ])\n  );\n\n  mod.addFunctionExport(\"run\", \"run\");\n  mod.addMemoryImport(\"0\", \"env\", \"memory\");\n  mod.setMemory(1, 256, \"memoryExport\", [], true);\n  mod.setFeatures(binaryen.Features.Atomics);\n\n  // Optimize the module using default passes and levels\n  //mod.optimize();\n\n  // // // Validate the module\n  // if (!mod.validate()) throw new Error(\"validation error\");\n\n  // // Generate text format and binary\n  var textData = mod.emitText();\n  // console.log(textData);\n  var wasmData = mod.emitBinary();\n\n  // Example usage with the WebAssembly API\n  return new WebAssembly.Module(wasmData);\n}\n\nconst wasm = compile(\n  [Core.NumberT()],\n  [Core.Number(3), Core.Number(3), Core.Add(), Core.Add()]\n);\n\nvar instance = new WebAssembly.Instance(wasm, { env: { memory } });\nconsole.log((instance.exports.run as CallableFunction)(400));\n\n//addOne(42); // => 43\n"],
  "mappings": ";AAAA;AAEA,IAAO,mBAAQ;;;ACOR,oBAAc;AAAA,EAAd,cATP;AAUE,gBAAyB;AAAA;AAAA;AAK3B,oBAAc;AAAA,EAAd,cAfA;AAgBE,gBAAiB;AAAA;AAAA;AAGnB,uBAAiB;AAAA,EAGf,YAAY,GAAW;AAFvB,gBAAoB;AAGlB,SAAK,SAAS;AAAA;AAAA;AAMX,eAAwB;AAC7B,SAAO,IAAI;AAAA;AAGN,gBAAgB,GAAuB;AAC5C,SAAO,IAAI,WAAW;AAAA;AAGjB,mBAA4B;AACjC,SAAO,IAAI;AAAA;;;ACnCb,IAAI,SAAS,IAAI,YAAY,OAAO;AAAA,EAClC,SAAS;AAAA,EACT,SAAS;AAAA,EACT,QAAQ;AAAA;AAGV,iBAAiB,QAAqB,OAAoB;AACxD,MAAI,MAAM,IAAI,iBAAS;AAEvB,MAAI,aAAa,OAAO,SAAS;AACjC,QAAM,OAAO,MAAM;AACjB,kBAAc;AACd;AAAA;AAGF,QAAM,MAAM,MAAM;AAElB,QAAM,cAAc,MAAM,IAAI,CAAC,SAAS;AACtC,YAAQ,KAAK;AAAA,WACN;AAEH,cAAM,IAAI,IAAI,MAAM,IAAI,OAAO,iBAAS;AACxC,cAAM,IAAI,IAAI,MAAM,IAAI,QAAQ,GAAG,iBAAS;AAE5C;AACA,eAAO,IAAI,MAAM,IAAI,OAAO,IAAI,IAAI,IAAI,GAAG;AAAA,WACxC;AAEH;AAEA,eAAO,IAAI,MAAM,IAAI,OAAO,IAAI,IAAI,MAAM,KAAK;AAAA;AAAA;AAIrD,UAAQ,IAAI,UAAU;AAEtB,MAAI,YACF,OACA,iBAAS,WAAW,CAAC,iBAAS,OAC9B,iBAAS,KACT,CAAC,iBAAS,KAAK,iBAAS,MACxB,IAAI,MAAM,MAAM;AAAA,IACd,GAAG;AAAA,IACH,IAAI,OAAO,IAAI,MAAM,IAAI,OAAO,iBAAS;AAAA;AAI7C,MAAI,kBAAkB,OAAO;AAC7B,MAAI,gBAAgB,KAAK,OAAO;AAChC,MAAI,UAAU,GAAG,KAAK,gBAAgB,IAAI;AAC1C,MAAI,YAAY,iBAAS,SAAS;AASlC,MAAI,WAAW,IAAI;AAEnB,MAAI,WAAW,IAAI;AAGnB,SAAO,IAAI,YAAY,OAAO;AAAA;AAGhC,IAAM,OAAO,QACX,CAAC,AAAK,YACN,CAAC,AAAK,OAAO,IAAI,AAAK,OAAO,IAAI,AAAK,OAAO,AAAK;AAGpD,IAAI,WAAW,IAAI,YAAY,SAAS,MAAM,EAAE,KAAK,EAAE;AACvD,QAAQ,IAAK,SAAS,QAAQ,IAAyB;",
  "names": []
}
